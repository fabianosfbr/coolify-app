version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: docker/prod/Dockerfile
    container_name: coolify-app
    restart: unless-stopped
    volumes:
      - ./storage:/var/www/html/storage
    networks:
      - coolify-network
    depends_on:
      - mysql
      - redis

  webserver:
    image: nginx:alpine
    container_name: coolify-webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/prod/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./public:/var/www/html/public
      - ./storage/app/public:/var/www/html/public/storage
    depends_on:
      - app
    networks:
      - coolify-network

  mysql:
    image: mysql:8.0
    container_name: coolify-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-coolify}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_USER: ${DB_USERNAME:-coolify}
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    volumes:
      - coolify-mysql-data:/var/lib/mysql
    networks:
      - coolify-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD:-root}"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:alpine
    container_name: coolify-redis
    restart: unless-stopped
    volumes:
      - coolify-redis-data:/data
    networks:
      - coolify-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  coolify-network:
    driver: bridge

volumes:
  coolify-mysql-data:
    driver: local
  coolify-redis-data:
    driver: local
